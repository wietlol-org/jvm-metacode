// hash: #1c2e50ee
// data: serializationKey:55e6059d-ad02-4b77-88f4-17c9688d0ba9
// @formatter:off

package metacode.api.lexer.data.models

import bitblock.api.serialization.BitSerializable
import java.util.UUID
import utils.common.Jsonable
import utils.common.emptyHashCode
import utils.common.toJsonString
import utils.common.with

// Generated by BitBlock version 1.0.0

// @formatter:on
// @tomplot:customCode:start:gAeCSq

import metacode.api.lexer.sources.CharToken

// @tomplot:customCode:end
// @formatter:off

interface CharacterGroupLexerExpression : BitSerializable, LexerExpression, Jsonable
{
	companion object
	{
		val serializationKey: UUID
			get() = UUID.fromString("55e6059d-ad02-4b77-88f4-17c9688d0ba9")
	}
	
	override val serializationKey: UUID
		get() = Companion.serializationKey
	
	val characters: Set<Char>
	
	val isPositive: Boolean
	
	fun isEqualTo(other: Any?): Boolean
	{
		if (this === other) return true
		if (other == null) return false
		if (other !is CharacterGroupLexerExpression) return false
		
		if (characters != other.characters) return false
		if (isPositive != other.isPositive) return false
		
		return true
	}
	
	fun computeHashCode(): Int =
		emptyHashCode
			.with(characters)
			.with(isPositive)
	
	override fun toJson(): String =
		"""{"characters":${characters.toJsonString()},"isPositive":${isPositive.toJsonString()}}"""
	
	override fun duplicate(): CharacterGroupLexerExpression
	
	// @formatter:on
	// @tomplot:customCode:start:32T3K8
	
	override fun findMatches(tokens: List<CharToken>, fromIndex: Int): Sequence<String> =
		if (tokens.size <= fromIndex)
			emptySequence()
		else
			tokens[fromIndex]
				.let { character ->
					if (isPositive == characters.contains(character.char))
						sequenceOf(character.char.toString())
					else
						emptySequence()
				}
	
	override fun toExpressionString(): String =
		"[${if (isPositive) "" else "^"}${characters.joinToString("")}]"
	
	// @tomplot:customCode:end
	// @formatter:off
}
// @formatter:on
