// hash: #f5060ec7
// data: serializationKey:2b329ad7-8700-484a-93fc-f8d4cd68dd78
// @formatter:off

package metacode.api.lexer.data.models

import bitblock.api.serialization.BitSerializable
import java.util.UUID
import utils.common.Jsonable
import utils.common.emptyHashCode
import utils.common.toJsonString
import utils.common.with

// Generated by BitBlock version 1.0.0

// @formatter:on
// @tomplot:customCode:start:gAeCSq

import metacode.api.lexer.sources.CharToken

// @tomplot:customCode:end
// @formatter:off

interface LiteralLexerExpression : BitSerializable, LexerExpression, Jsonable
{
	companion object
	{
		val serializationKey: UUID
			get() = UUID.fromString("2b329ad7-8700-484a-93fc-f8d4cd68dd78")
	}
	
	override val serializationKey: UUID
		get() = Companion.serializationKey
	
	val query: String
	
	fun isEqualTo(other: Any?): Boolean
	{
		if (this === other) return true
		if (other == null) return false
		if (other !is LiteralLexerExpression) return false
		
		if (query != other.query) return false
		
		return true
	}
	
	fun computeHashCode(): Int =
		emptyHashCode
			.with(query)
	
	override fun toJson(): String =
		"""{"query":${query.toJsonString()}}"""
	
	override fun duplicate(): LiteralLexerExpression
	
	// @formatter:on
	// @tomplot:customCode:start:32T3K8
	
	override fun findMatches(tokens: List<CharToken>, fromIndex: Int): Sequence<String> =
		when
		{
			tokens.size <= fromIndex -> emptySequence()
			query.indices.all { query[it] == tokens[fromIndex + it].char } -> sequenceOf(query)
			else -> emptySequence()
		}
	
	override fun toExpressionString(): String =
		"\"$query\""
	
	// @tomplot:customCode:end
	// @formatter:off
}
// @formatter:on
