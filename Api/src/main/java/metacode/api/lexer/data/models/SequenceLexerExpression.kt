// hash: #43130a04
// data: serializationKey:09547f18-1d7d-4e0b-b784-d9573b785256
// @formatter:off

package metacode.api.lexer.data.models

import bitblock.api.serialization.BitSerializable
import java.util.UUID
import utils.common.Jsonable
import utils.common.emptyHashCode
import utils.common.toJsonString
import utils.common.with

// Generated by BitBlock version 1.0.0

// @formatter:on
// @tomplot:customCode:start:gAeCSq

import metacode.api.lexer.sources.CharToken
import utils.common.collections.NTreeNode

// @tomplot:customCode:end
// @formatter:off

interface SequenceLexerExpression : BitSerializable, LexerExpression, Jsonable
{
	companion object
	{
		val serializationKey: UUID
			get() = UUID.fromString("09547f18-1d7d-4e0b-b784-d9573b785256")
	}
	
	override val serializationKey: UUID
		get() = Companion.serializationKey
	
	val expressions: List<LexerExpression>
	
	fun isEqualTo(other: Any?): Boolean
	{
		if (this === other) return true
		if (other == null) return false
		if (other !is SequenceLexerExpression) return false
		
		if (expressions != other.expressions) return false
		
		return true
	}
	
	fun computeHashCode(): Int =
		emptyHashCode
			.with(expressions)
	
	override fun toJson(): String =
		"""{"expressions":${expressions.toJsonString()}}"""
	
	override fun duplicate(): SequenceLexerExpression
	
	// @formatter:on
	// @tomplot:customCode:start:32T3K8
	
	override fun findMatches(tokens: List<CharToken>, fromIndex: Int): Sequence<String> =
		sequenceOf(Unit)
			.flatMap { matchManyRules(expressions, tokens, fromIndex, NTreeNode(null)) }
			.map {
				it.sequenceToRoot()
					.filterNotNull()
					.toList()
			}
			.map { it.joinToString("") }
	
	override fun toExpressionString(): String =
		expressions.joinToString(" ") { it.toExpressionString() }
	
	private fun matchManyRules(expressions: List<LexerExpression>, tokens: List<CharToken>, fromIndex: Int, parentNode: NTreeNode<String?>): Sequence<NTreeNode<String?>>
	{
		if (expressions.isEmpty())
			return sequenceOf("")
				.map { NTreeNode(it, parentNode) }
		
		val nodes = expressions
			.first()
			.findMatches(tokens, fromIndex)
			.map { NTreeNode(it, parentNode) }
		
		if (expressions.size == 1)
			return nodes
		
		return nodes
			.flatMap { matchManyRules(expressions.drop(1), tokens, fromIndex + it.value!!.length, it) }
	}
	
	// @tomplot:customCode:end
	// @formatter:off
}
// @formatter:on
