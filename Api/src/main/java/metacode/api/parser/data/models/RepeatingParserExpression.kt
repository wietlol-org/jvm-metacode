// hash: #c4d16c71
// data: serializationKey:16c64297-7f9c-47b4-9db9-4f609340ec14
// @formatter:off

package metacode.api.parser.data.models

import bitblock.api.serialization.BitSerializable
import java.util.UUID
import utils.common.Jsonable
import utils.common.emptyHashCode
import utils.common.toJsonString
import utils.common.with

// Generated by BitBlock version 1.0.0

// @formatter:on
// @tomplot:customCode:start:gAeCSq
// @tomplot:customCode:end
// @formatter:off

interface RepeatingParserExpression : BitSerializable, ParserExpression, Jsonable
{
	companion object
	{
		val serializationKey: UUID
			get() = UUID.fromString("16c64297-7f9c-47b4-9db9-4f609340ec14")
	}
	
	override val serializationKey: UUID
		get() = Companion.serializationKey
	
	val expression: ParserExpression
	
	val minimumMatches: Int
	
	val isGreedy: Boolean
	
	fun isEqualTo(other: Any?): Boolean
	{
		if (this === other) return true
		if (other == null) return false
		if (other !is RepeatingParserExpression) return false
		
		if (expression != other.expression) return false
		if (minimumMatches != other.minimumMatches) return false
		if (isGreedy != other.isGreedy) return false
		
		return true
	}
	
	fun computeHashCode(): Int =
		emptyHashCode
			.with(expression)
			.with(minimumMatches)
			.with(isGreedy)
	
	override fun toJson(): String =
		"""{"expression":${expression.toJsonString()},"minimumMatches":${minimumMatches.toJsonString()},"isGreedy":${isGreedy.toJsonString()}}"""
	
	override fun duplicate(): RepeatingParserExpression
	
	// @formatter:on
	// @tomplot:customCode:start:32T3K8
	// @tomplot:customCode:end
	// @formatter:off
}
// @formatter:on
