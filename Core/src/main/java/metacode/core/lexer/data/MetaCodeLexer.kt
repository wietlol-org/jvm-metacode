// hash: #9315d1ac
// @formatter:off

package metacode.core.lexer.data

import bitblock.api.registry.ModelRegistry
import bitblock.api.registry.ModelRegistryKey
import bitblock.api.registry.RegistrySet
import bitblock.api.serialization.ModelSerializer
import bitblock.core.BitBlockBase
import bitblock.core.registry.CommonModelRegistryKey
import metacode.core.lexer.data.serializers.*

// Generated by BitBlock version 1.0.0

object MetaCodeLexer : RegistrySet
{
	override val modelSerializers: Map<ModelRegistryKey, ModelSerializer<*, *>> = createModelSerializers()
	
	private fun createModelSerializers(): Map<ModelRegistryKey, ModelSerializer<*, *>> =
		mapOf(
			CommonModelRegistryKey("AnyOfLexerExpression", "MetaCodeLexer", "Wietlol", "1.0") to AnyOfLexerExpressionSerializer,
			CommonModelRegistryKey("CharacterGroupLexerExpression", "MetaCodeLexer", "Wietlol", "1.0") to CharacterGroupLexerExpressionSerializer,
			CommonModelRegistryKey("LiteralLexerExpression", "MetaCodeLexer", "Wietlol", "1.0") to LiteralLexerExpressionSerializer,
			CommonModelRegistryKey("OptionalLexerExpression", "MetaCodeLexer", "Wietlol", "1.0") to OptionalLexerExpressionSerializer,
			CommonModelRegistryKey("RepeatingLexerExpression", "MetaCodeLexer", "Wietlol", "1.0") to RepeatingLexerExpressionSerializer,
			CommonModelRegistryKey("SequenceLexerExpression", "MetaCodeLexer", "Wietlol", "1.0") to SequenceLexerExpressionSerializer,
			CommonModelRegistryKey("WildcardLexerExpression", "MetaCodeLexer", "Wietlol", "1.0") to WildcardLexerExpressionSerializer,
			CommonModelRegistryKey("LexerRule", "MetaCodeLexer", "Wietlol", "1.0") to LexerRuleSerializer,
			CommonModelRegistryKey("LexerRuleMetaData", "MetaCodeLexer", "Wietlol", "1.0") to LexerRuleMetaDataSerializer,
		)
	
	override fun initialize(registry: ModelRegistry?) =
		modelSerializers.forEach((registry ?: BitBlockBase.modelRegistry)::set)
}
// @formatter:on
