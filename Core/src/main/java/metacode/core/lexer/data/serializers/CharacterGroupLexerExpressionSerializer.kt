// hash: #16212db2
// @formatter:off

package metacode.core.lexer.data.serializers

import bitblock.api.serialization.DeserializationContext
import bitblock.api.serialization.ModelSerializer
import bitblock.api.serialization.Schema
import bitblock.api.serialization.SerializationContext
import bitblock.api.serialization.deserialize
import java.io.InputStream
import java.io.OutputStream
import java.util.UUID
import metacode.api.lexer.data.models.*
import metacode.api.lexer.data.models.CharacterGroupLexerExpression
import metacode.core.lexer.data.builders.CharacterGroupLexerExpressionBuilder
import metacode.core.lexer.data.models.*
import utils.common.streams.readUnsignedVarInt
import utils.common.streams.writeUnsignedVarInt

// Generated by BitBlock version 1.0.0

// @formatter:on
// @tomplot:customCode:start:70v0f9
// @tomplot:customCode:end
// @formatter:off

object CharacterGroupLexerExpressionSerializer : ModelSerializer<CharacterGroupLexerExpression, CharacterGroupLexerExpression>
{
	private val endOfObject: Int = 0
	
	private val charactersIndex: Int = 1
	
	private val isPositiveIndex: Int = 2
	
	override val modelId: UUID
		get() = CharacterGroupLexerExpression.serializationKey
	
	override val dataClass: Class<CharacterGroupLexerExpression>
		get() = CharacterGroupLexerExpression::class.java
	
	override fun serialize(serializationContext: SerializationContext, stream: OutputStream, schema: Schema, entity: CharacterGroupLexerExpression)
	{
		stream.writeUnsignedVarInt(charactersIndex)
		schema.serialize(serializationContext, stream, entity.characters)
		
		stream.writeUnsignedVarInt(isPositiveIndex)
		schema.serialize(serializationContext, stream, entity.isPositive)
		
		stream.writeUnsignedVarInt(endOfObject)
	}
	
	override fun deserialize(deserializationContext: DeserializationContext, stream: InputStream, schema: Schema): CharacterGroupLexerExpression
	{
		var characters: MutableSet<Char>? = mutableSetOf()
		var isPositive: Boolean? = true
		
		while (true)
		{
			when (stream.readUnsignedVarInt())
			{
				endOfObject -> return DefaultCharacterGroupLexerExpression(
					characters!!.toMutableSet(),
					isPositive!!,
				)
				charactersIndex -> characters = schema.deserialize(deserializationContext, stream)
				isPositiveIndex -> isPositive = schema.deserialize(deserializationContext, stream)
				else -> schema.deserialize<Any>(deserializationContext, stream)
			}
		}
	}
	
	// @formatter:on
	// @tomplot:customCode:start:5CFs54
	// @tomplot:customCode:end
	// @formatter:off
}
// @formatter:on
