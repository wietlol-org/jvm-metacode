// hash: #da9837fa
// @formatter:off

package metacode.core.lexer.data.serializers

import bitblock.api.serialization.DeserializationContext
import bitblock.api.serialization.ModelSerializer
import bitblock.api.serialization.Schema
import bitblock.api.serialization.SerializationContext
import bitblock.api.serialization.deserialize
import java.io.InputStream
import java.io.OutputStream
import java.util.UUID
import metacode.api.lexer.data.models.*
import metacode.api.lexer.data.models.OptionalLexerExpression
import metacode.core.lexer.data.builders.OptionalLexerExpressionBuilder
import metacode.core.lexer.data.models.*
import utils.common.streams.readUnsignedVarInt
import utils.common.streams.writeUnsignedVarInt

// Generated by BitBlock version 1.0.0

// @formatter:on
// @tomplot:customCode:start:70v0f9
// @tomplot:customCode:end
// @formatter:off

object OptionalLexerExpressionSerializer : ModelSerializer<OptionalLexerExpression, OptionalLexerExpression>
{
	private val endOfObject: Int = 0
	
	private val expressionIndex: Int = 1
	
	private val isGreedyIndex: Int = 2
	
	override val modelId: UUID
		get() = OptionalLexerExpression.serializationKey
	
	override val dataClass: Class<OptionalLexerExpression>
		get() = OptionalLexerExpression::class.java
	
	override fun serialize(serializationContext: SerializationContext, stream: OutputStream, schema: Schema, entity: OptionalLexerExpression)
	{
		stream.writeUnsignedVarInt(expressionIndex)
		schema.serialize(serializationContext, stream, entity.expression)
		
		stream.writeUnsignedVarInt(isGreedyIndex)
		schema.serialize(serializationContext, stream, entity.isGreedy)
		
		stream.writeUnsignedVarInt(endOfObject)
	}
	
	override fun deserialize(deserializationContext: DeserializationContext, stream: InputStream, schema: Schema): OptionalLexerExpression
	{
		var expression: LexerExpression? = null
		var isGreedy: Boolean? = true
		
		while (true)
		{
			when (stream.readUnsignedVarInt())
			{
				endOfObject -> return DefaultOptionalLexerExpression(
					expression!!,
					isGreedy!!,
				)
				expressionIndex -> expression = schema.deserialize(deserializationContext, stream)
				isGreedyIndex -> isGreedy = schema.deserialize(deserializationContext, stream)
				else -> schema.deserialize<Any>(deserializationContext, stream)
			}
		}
	}
	
	// @formatter:on
	// @tomplot:customCode:start:5CFs54
	// @tomplot:customCode:end
	// @formatter:off
}
// @formatter:on
