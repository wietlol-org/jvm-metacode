// hash: #f2d1d793
// @formatter:off

package metacode.core.parser.data.models

import metacode.api.parser.data.models.*

// Generated by BitBlock version 1.0.0

// @formatter:on
// @tomplot:customCode:start:B8CiSn

import metacode.api.lexer.MetaCodeToken
import metacode.api.parser.context.MatchContext
import metacode.api.parser.results.ExpressionResult
import metacode.core.parser.results.ExpressionResultImpl
import metacode.api.parser.results.RuleResult
import metacode.core.parser.data.commonMergeResults

// @tomplot:customCode:end
// @formatter:off

data class DefaultAnyOfParserExpression(
	override val expressions: List<ParserExpression>,
) : AnyOfParserExpression
{
	override fun equals(other: Any?): Boolean =
		isEqualTo(other)
	
	override fun hashCode(): Int =
		computeHashCode()
	
	override fun toString(): String =
		toJson()
	
	override fun duplicate(): DefaultAnyOfParserExpression =
		copy(
			expressions = expressions.map { it.duplicate() }.toMutableList(),
		)
	
	// @formatter:on
	// @tomplot:customCode:start:fIpaBB
	
	override fun findMatches(context: MatchContext, tokens: List<MetaCodeToken>, fromIndex: Int): Sequence<ExpressionResult> =
		expressions
			.asSequence()
			.flatMap { it.findMatches(context, tokens, fromIndex) }
			.map { nestedMatch ->
				val matchedTokens = tokens.subList(fromIndex, nestedMatch.endIndex)
				ExpressionResultImpl(
					this,
					fromIndex,
					nestedMatch.endIndex,
					matchedTokens,
					nestedMatch.option,
					nestedMatch.members
				)
			}
	
	override fun findMatches(context: MatchContext, tokens: List<MetaCodeToken>, fromIndex: Int, feed: List<RuleResult>): Sequence<ExpressionResult> =
		expressions
			.asSequence()
			.flatMap { it.findMatches(context, tokens, fromIndex, feed) }
			.map { nestedMatch ->
				val matchedTokens = tokens.subList(fromIndex, nestedMatch.endIndex)
				ExpressionResultImpl(
					this,
					fromIndex,
					nestedMatch.endIndex,
					matchedTokens,
					nestedMatch.option,
					nestedMatch.members
				)
			}
	
	override fun isLeftRecursiveTo(context: MatchContext, name: CharSequence): Boolean =
		expressions.any { it.isLeftRecursiveTo(context, name) }
	
	override fun toGrammarString(): String =
		"(${expressions.joinToString(" | ") { it.toGrammarString() }})"
	
	override fun mergeResults(results: List<ExpressionResult>, tokens: List<MetaCodeToken>, fromIndex: Int): ExpressionResult =
		commonMergeResults(results, tokens, fromIndex)
	
	// @tomplot:customCode:end
	// @formatter:off
}
// @formatter:on
