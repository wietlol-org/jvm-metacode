// hash: #dced6868
// @formatter:off

package metacode.core.parser.data.models

import metacode.api.parser.data.models.*

// Generated by BitBlock version 1.0.0

// @formatter:on
// @tomplot:customCode:start:B8CiSn

import metacode.core.parser.data.commonMergeResults
import metacode.core.parser.results.ExpressionResultImpl
import metacode.api.lexer.MetaCodeToken
import metacode.api.parser.context.MatchContext
import metacode.api.parser.results.ExpressionResult
import metacode.api.parser.results.RuleResult
import utils.common.manyValuesMapOf

// @tomplot:customCode:end
// @formatter:off

data class DefaultLabelledParserExpression(
	override val label: String,
	override val expression: ParserExpression,
) : LabelledParserExpression
{
	override fun equals(other: Any?): Boolean =
		isEqualTo(other)
	
	override fun hashCode(): Int =
		computeHashCode()
	
	override fun toString(): String =
		toJson()
	
	override fun duplicate(): DefaultLabelledParserExpression =
		copy(
			label = label,
			expression = expression.duplicate(),
		)
	
	// @formatter:on
	// @tomplot:customCode:start:fIpaBB
	
	override fun findMatches(context: MatchContext, tokens: List<MetaCodeToken>, fromIndex: Int): Sequence<ExpressionResult> =
		expression
			.findMatches(context, tokens, fromIndex)
			.map { ExpressionResultImpl(this, it.startIndex, it.endIndex, it.tokens, it.option, manyValuesMapOf(label to it)) }
	
	override fun findMatches(context: MatchContext, tokens: List<MetaCodeToken>, fromIndex: Int, feed: List<RuleResult>): Sequence<ExpressionResult> =
		expression
			.findMatches(context, tokens, fromIndex, feed)
			.map { ExpressionResultImpl(this, it.startIndex, it.endIndex, it.tokens, it.option, manyValuesMapOf(label to it)) }
	
	override fun isLeftRecursiveTo(context: MatchContext, name: CharSequence): Boolean =
		expression.isLeftRecursiveTo(context, name)
	
	override fun toGrammarString(): String =
		"$label=${expression.toGrammarString()}"
	
	override fun mergeResults(results: List<ExpressionResult>, tokens: List<MetaCodeToken>, fromIndex: Int): ExpressionResult =
		commonMergeResults(results, tokens, fromIndex)
	
	// @tomplot:customCode:end
	// @formatter:off
}
// @formatter:on
