// hash: #3f7c7524
// @formatter:off

package metacode.core.parser.data.models

import metacode.api.parser.data.models.*

// Generated by BitBlock version 1.0.0

// @formatter:on
// @tomplot:customCode:start:B8CiSn

import metacode.core.parser.data.commonMergeResults
import metacode.api.lexer.MetaCodeToken
import metacode.api.parser.context.MatchContext
import metacode.api.parser.results.ExpressionResult
import metacode.api.parser.results.RuleResult
import utils.common.collections.NTreeNode

// @tomplot:customCode:end
// @formatter:off

data class DefaultRepeatingParserExpression(
	override val expression: ParserExpression,
	override val minimumMatches: Int,
	override val isGreedy: Boolean = true,
) : RepeatingParserExpression
{
	override fun equals(other: Any?): Boolean =
		isEqualTo(other)
	
	override fun hashCode(): Int =
		computeHashCode()
	
	override fun toString(): String =
		toJson()
	
	override fun duplicate(): DefaultRepeatingParserExpression =
		copy(
			expression = expression.duplicate(),
			minimumMatches = minimumMatches,
			isGreedy = isGreedy,
		)
	
	// @formatter:on
	// @tomplot:customCode:start:fIpaBB
	
	override fun findMatches(context: MatchContext, tokens: List<MetaCodeToken>, fromIndex: Int): Sequence<ExpressionResult> =
		findMatches(context, tokens, fromIndex, emptyList())
	
	override fun findMatches(context: MatchContext, tokens: List<MetaCodeToken>, fromIndex: Int, feed: List<RuleResult>): Sequence<ExpressionResult> =
		matchRepeatingRule(expression, context, tokens, fromIndex, feed, NTreeNode(null))
			.map {
				it.sequenceToRoot()
					.filterNotNull()
					.toList()
			}
			.filter { it.size >= minimumMatches }
			.map { mergeResults(it, tokens, fromIndex) }
	
	override fun isLeftRecursiveTo(context: MatchContext, name: CharSequence): Boolean =
		expression.isLeftRecursiveTo(context, name)
	
	override fun toGrammarString(): String =
		"(${expression.toGrammarString()}{$minimumMatches,})" // todo greedyness
	
	private fun matchRepeatingRule(rule: ParserExpression, context: MatchContext, tokens: List<MetaCodeToken>, fromIndex: Int, feed: List<RuleResult>, parentNode: NTreeNode<ExpressionResult?>): Sequence<NTreeNode<ExpressionResult?>> =
		if (isGreedy)
			matchRepeatingRuleGreedy(rule, context, tokens, fromIndex, feed, parentNode)
		else
			matchRepeatingRuleLazy(rule, context, tokens, fromIndex, feed, parentNode)
	
	private fun matchRepeatingRuleGreedy(rule: ParserExpression, context: MatchContext, tokens: List<MetaCodeToken>, fromIndex: Int, feed: List<RuleResult>, parentNode: NTreeNode<ExpressionResult?>): Sequence<NTreeNode<ExpressionResult?>> =
		rule
			.findMatches(context, tokens, fromIndex, feed)
			.filter { it.startIndex != it.endIndex }
			.map { NTreeNode(it, parentNode) }
			.flatMap { matchRepeatingRuleGreedy(rule, context, tokens, it.value!!.endIndex, emptyList(), it) }
			.plus(parentNode)
	
	private fun matchRepeatingRuleLazy(rule: ParserExpression, context: MatchContext, tokens: List<MetaCodeToken>, fromIndex: Int, feed: List<RuleResult>, parentNode: NTreeNode<ExpressionResult?>): Sequence<NTreeNode<ExpressionResult?>> =
		sequenceOf(parentNode)
			.plus(rule
				.findMatches(context, tokens, fromIndex, feed)
				.filter { it.startIndex != it.endIndex }
				.map { NTreeNode(it, parentNode) }
				.flatMap { matchRepeatingRuleLazy(rule, context, tokens, it.value!!.endIndex, emptyList(), it) })
	
	override fun mergeResults(results: List<ExpressionResult>, tokens: List<MetaCodeToken>, fromIndex: Int): ExpressionResult =
		commonMergeResults(results, tokens, fromIndex)
	
	// @tomplot:customCode:end
	// @formatter:off
}
// @formatter:on
