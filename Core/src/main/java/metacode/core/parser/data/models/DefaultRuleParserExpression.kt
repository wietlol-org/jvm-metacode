// hash: #bb755f49
// @formatter:off

package metacode.core.parser.data.models

import metacode.api.parser.data.models.*

// Generated by BitBlock version 1.0.0

// @formatter:on
// @tomplot:customCode:start:B8CiSn

import metacode.core.parser.data.commonMergeResults
import metacode.core.parser.results.ExpressionResultImpl
import metacode.api.lexer.MetaCodeToken
import metacode.api.parser.context.MatchContext
import metacode.api.parser.data.models.ParserExpression
import metacode.api.parser.results.ExpressionResult
import metacode.api.parser.results.ParserResult
import metacode.api.parser.results.RuleResult

// @tomplot:customCode:end
// @formatter:off

data class DefaultRuleParserExpression(
	override val ruleName: String,
	override val prefix: String? = null,
) : RuleParserExpression
{
	override fun equals(other: Any?): Boolean =
		isEqualTo(other)
	
	override fun hashCode(): Int =
		computeHashCode()
	
	override fun toString(): String =
		toJson()
	
	override fun duplicate(): DefaultRuleParserExpression =
		copy(
			ruleName = ruleName,
			prefix = prefix,
		)
	
	// @formatter:on
	// @tomplot:customCode:start:fIpaBB
	
	override fun findMatches(context: MatchContext, tokens: List<MetaCodeToken>, fromIndex: Int): Sequence<ExpressionResult> =
		context.getRule(ruleName)
			.findMatches(context, tokens, fromIndex)
			.map { it.flatten() }
			.map { it.toExpressionResult(this) }
	
	override fun findMatches(context: MatchContext, tokens: List<MetaCodeToken>, fromIndex: Int, feed: List<RuleResult>): Sequence<ExpressionResult> =
		when
		{
			feed.isEmpty() -> findMatches(context, tokens, fromIndex)
			feed.first().rule == context.getRule(ruleName) -> feed.asSequence().map { it.flatten() }.map { it.toExpressionResult(this) }
			else -> emptySequence()
		}
	
	private fun ParserResult.flatten(): ParserResult =
		if (option?.name == "_next")
			members["_next"].single().flatten()
		else
			this
	
	override fun isLeftRecursiveTo(context: MatchContext, name: CharSequence): Boolean =
		(ruleName.equals(name.toString(), true)
			|| context.getRule(ruleName).isLeftRecursiveTo(context, name))
	
	override fun toGrammarString(): String =
		ruleName
	
	private fun ParserResult.toExpressionResult(expression: ParserExpression): ExpressionResult =
		ExpressionResultImpl(
			expression,
			startIndex,
			endIndex,
			tokens,
			option,
			members
		)
	
	override fun mergeResults(results: List<ExpressionResult>, tokens: List<MetaCodeToken>, fromIndex: Int): ExpressionResult =
		commonMergeResults(results, tokens, fromIndex)
	
	// @tomplot:customCode:end
	// @formatter:off
}
// @formatter:on
