// hash: #407527b7
// @formatter:off

package metacode.core.parser.data.models

import metacode.api.parser.data.models.*

// Generated by BitBlock version 1.0.0

// @formatter:on
// @tomplot:customCode:start:B8CiSn

import metacode.api.lexer.MetaCodeToken
import metacode.api.parser.context.MatchContext
import metacode.api.parser.results.ExpressionResult
import metacode.core.parser.results.ExpressionResultImpl
import metacode.api.parser.results.RuleResult
import metacode.core.parser.data.commonMergeResults
import utils.common.collections.NTreeNode
import utils.common.emptyManyValuesMap

// @tomplot:customCode:end
// @formatter:off

data class DefaultSequenceParserExpression(
	override val expressions: List<ParserExpression>,
) : SequenceParserExpression
{
	override fun equals(other: Any?): Boolean =
		isEqualTo(other)
	
	override fun hashCode(): Int =
		computeHashCode()
	
	override fun toString(): String =
		toJson()
	
	override fun duplicate(): DefaultSequenceParserExpression =
		copy(
			expressions = expressions.map { it.duplicate() }.toMutableList(),
		)
	
	// @formatter:on
	// @tomplot:customCode:start:fIpaBB
	
	override fun findMatches(context: MatchContext, tokens: List<MetaCodeToken>, fromIndex: Int): Sequence<ExpressionResult> =
		findMatches(context, tokens, fromIndex, emptyList())
	
	override fun findMatches(context: MatchContext, tokens: List<MetaCodeToken>, fromIndex: Int, feed: List<RuleResult>): Sequence<ExpressionResult> =
		sequenceOf(Unit)
			.flatMap { matchManyRules(expressions, context, tokens, fromIndex, NTreeNode(null), feed) }
			.map {
				it.sequenceToRoot()
					.filterNotNull()
					.toList()
			}
			.map { mergeResults(it, tokens, fromIndex) }
	
	override fun isLeftRecursiveTo(context: MatchContext, name: CharSequence): Boolean =
		expressions.firstOrNull()?.isLeftRecursiveTo(context, name) ?: false
	
	override fun toGrammarString(): String =
		"(${expressions.joinToString(" ") { it.toGrammarString() }})"
	
	private fun matchManyRules(expressions: List<ParserExpression>, context: MatchContext, tokens: List<MetaCodeToken>, fromIndex: Int, parentNode: NTreeNode<ExpressionResult?>, feed: List<RuleResult>): Sequence<NTreeNode<ExpressionResult?>>
	{
		if (expressions.isEmpty())
			return sequenceOf(ExpressionResultImpl(this, fromIndex, fromIndex, emptyList(), null, emptyManyValuesMap()))
				.map { NTreeNode(it, parentNode) }
		
		val nodes = expressions
			.first()
			.findMatches(context, tokens, fromIndex, feed)
			.map { NTreeNode(it, parentNode) }
		
		if (expressions.size == 1)
			return nodes
		
		return nodes
			.flatMap { matchManyRules(expressions.drop(1), context, tokens, it.value!!.endIndex, it, emptyList()) }
	}
	
	override fun mergeResults(results: List<ExpressionResult>, tokens: List<MetaCodeToken>, fromIndex: Int): ExpressionResult =
		commonMergeResults(results, tokens, fromIndex)
	
	// @tomplot:customCode:end
	// @formatter:off
}
// @formatter:on
