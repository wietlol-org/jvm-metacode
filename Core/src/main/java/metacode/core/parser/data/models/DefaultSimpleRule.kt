// hash: #3111b1e5
// @formatter:off

package metacode.core.parser.data.models

import metacode.api.parser.data.models.*

// Generated by BitBlock version 1.0.0

// @formatter:on
// @tomplot:customCode:start:B8CiSn

import metacode.api.lexer.MetaCodeToken
import metacode.api.parser.context.MatchContext
import metacode.api.parser.results.RuleResult
import metacode.core.parser.results.RuleResultImpl

// @tomplot:customCode:end
// @formatter:off

data class DefaultSimpleRule(
	override val name: String,
	override val expression: ParserExpression,
) : SimpleRule
{
	override fun equals(other: Any?): Boolean =
		isEqualTo(other)
	
	override fun hashCode(): Int =
		computeHashCode()
	
	override fun toString(): String =
		toJson()
	
	override fun duplicate(): DefaultSimpleRule =
		copy(
			name = name,
			expression = expression.duplicate(),
		)
	
	// @formatter:on
	// @tomplot:customCode:start:fIpaBB
	
	override fun findMatches(context: MatchContext, tokens: List<MetaCodeToken>, fromIndex: Int): Sequence<RuleResult> =
		expression
			.findMatches(context, tokens, fromIndex)
			.map { RuleResultImpl(this, it.startIndex, it.endIndex, it.tokens, null, it.members) }
	
	override fun isLeftRecursiveTo(context: MatchContext, name: CharSequence): Boolean =
		expression.isLeftRecursiveTo(context, this.name).not() && expression.isLeftRecursiveTo(context, name)
	
	// @tomplot:customCode:end
	// @formatter:off
}
// @formatter:on
