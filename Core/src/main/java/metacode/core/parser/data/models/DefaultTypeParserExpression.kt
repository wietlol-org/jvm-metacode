// hash: #679cb86f
// @formatter:off

package metacode.core.parser.data.models

import metacode.api.parser.data.models.*

// Generated by BitBlock version 1.0.0

// @formatter:on
// @tomplot:customCode:start:B8CiSn

import metacode.core.parser.data.commonMergeResults
import metacode.core.parser.results.ExpressionResultImpl
import metacode.api.lexer.MetaCodeToken
import metacode.api.parser.context.MatchContext
import metacode.api.parser.results.ExpressionResult
import metacode.api.parser.results.RuleResult
import utils.common.emptyManyValuesMap

// @tomplot:customCode:end
// @formatter:off

data class DefaultTypeParserExpression(
	override val typeName: String,
) : TypeParserExpression
{
	override fun equals(other: Any?): Boolean =
		isEqualTo(other)
	
	override fun hashCode(): Int =
		computeHashCode()
	
	override fun toString(): String =
		toJson()
	
	override fun duplicate(): DefaultTypeParserExpression =
		copy(
			typeName = typeName,
		)
	
	// @formatter:on
	// @tomplot:customCode:start:fIpaBB
	
	override fun findMatches(context: MatchContext, tokens: List<MetaCodeToken>, fromIndex: Int): Sequence<ExpressionResult>
	{
		if (tokens.size <= fromIndex)
			return emptySequence()
		
		val currentToken = tokens[fromIndex]
		
		return if (currentToken.type == typeName)
		{
			val toIndex = fromIndex + 1
			val matchedToken = tokens.subList(fromIndex, toIndex)
			sequenceOf(
				ExpressionResultImpl(
					this,
					fromIndex,
					toIndex,
					matchedToken,
					null,
					emptyManyValuesMap()
				)
			)
		}
		else
			emptySequence()
	}
	
	override fun findMatches(context: MatchContext, tokens: List<MetaCodeToken>, fromIndex: Int, feed: List<RuleResult>): Sequence<ExpressionResult> =
		if (feed.isNotEmpty())
			throw IllegalStateException("Impossible to find matches with a feed on a non-left-recursive expression!")
		else
			findMatches(context, tokens, fromIndex)
	
	override fun isLeftRecursiveTo(context: MatchContext, name: CharSequence): Boolean =
		false
	
	override fun toGrammarString(): String =
		"&$typeName"
	
	override fun mergeResults(results: List<ExpressionResult>, tokens: List<MetaCodeToken>, fromIndex: Int): ExpressionResult =
		commonMergeResults(results, tokens, fromIndex)
	
	// @tomplot:customCode:end
	// @formatter:off
}
// @formatter:on
